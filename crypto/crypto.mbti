package "moonbitlang/x/crypto"

// Values
fn bytes_to_hex_string(FixedArray[Byte]) -> String

fn chacha12(FixedArray[UInt], UInt, FixedArray[Byte], nonce~ : UInt = ..) -> FixedArray[Byte]!

fn chacha20(FixedArray[UInt], UInt, FixedArray[Byte], nonce~ : UInt = ..) -> FixedArray[Byte]!

fn chacha8(FixedArray[UInt], UInt, FixedArray[Byte], nonce~ : UInt = ..) -> FixedArray[Byte]!

fn hmac[H : CryptoHasher](H, FixedArray[Byte], FixedArray[Byte]) -> FixedArray[Byte]

fn md5(FixedArray[Byte]) -> FixedArray[Byte]

fn sha1(FixedArray[Byte]) -> FixedArray[Byte]

fn sha224(FixedArray[Byte]) -> FixedArray[Byte]

fn sha224_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn sha256(FixedArray[Byte]) -> FixedArray[Byte]

fn sha256_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn sm3(FixedArray[Byte]) -> FixedArray[Byte]

fn sm3_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn uints_to_hex_string(Iter[UInt]) -> String

// Types and methods
type MD5
impl MD5 {
  new() -> Self
}
impl CryptoHasher for MD5

type SHA256
impl SHA256 {
  new(reg~ : FixedArray[UInt] = ..) -> Self
  update_from_iter(Self, Iter[Byte]) -> Unit
}
impl CryptoHasher for SHA256

type SM3
impl SM3 {
  new() -> Self
  update_from_iter(Self, Iter[Byte]) -> Unit
}
impl CryptoHasher for SM3

// Type aliases

// Traits
trait CryptoHasher

